{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport function useTableCheckbox(data) {\n  _s();\n  const [checkedItemsArray, setCheckedItemsArray] = useState([]);\n  function deleteCellTable() {\n    //функция для удаления выделенных чекбоксом полей и отрисовки нового массива\n    for (let i = 0; i < data.length; i++) {\n      if (checkedItemsArray.includes(data[i].id)) {\n        data.splice(i, 1);\n        i--;\n      }\n    }\n    setCheckedItemsArray([]);\n  }\n  const isAllChecked = checkedItemsArray.length && checkedItemsArray.length === data.length;\n  function checkboxHandler(id) {\n    //обработчик для добавления чекбокса одному полю отображаемой таблицы\n    setCheckedItemsArray(prev => {\n      if (prev.includes(id)) {\n        return prev.filter(item => item !== id);\n      } else {\n        return [...prev, id];\n      }\n    });\n    //фильтруем массив и возвращаем новый без находящегося в нем id\n    //иначе если id в массиве нет, разворачиваем старый массив и добавляем туда новый id\n  }\n\n  function allClick() {\n    const newArr = data.map(item => item.id); // создаем новый массив в который помещаем все id полей отображаемой таблицы\n\n    if (newArr.length === checkedItemsArray.length) {\n      // если массив выбранных полей таблицы равен выбранным полям по одному\n      return setCheckedItemsArray([]); // то сбрасываем значение массива до пустого\n    }\n\n    setCheckedItemsArray(newArr); //иначе добавляем оставшиеся поля таблицы в массив\n  }\n\n  return {\n    allClick,\n    checkboxHandler,\n    isAllChecked,\n    deleteCellTable,\n    checkedItemsArray\n  };\n}\n_s(useTableCheckbox, \"8lg0ecJpFC6sBnCpEfbOrtQY3XM=\");","map":{"version":3,"names":["useState","useTableCheckbox","data","_s","checkedItemsArray","setCheckedItemsArray","deleteCellTable","i","length","includes","id","splice","isAllChecked","checkboxHandler","prev","filter","item","allClick","newArr","map"],"sources":["/home/user/Desktop/app-typescript/src/hooks/useTableCheckbox.tsx"],"sourcesContent":["import { useState } from \"react\";\n\nexport function useTableCheckbox(data) {\n  const [checkedItemsArray, setCheckedItemsArray] = useState([]);\n  function deleteCellTable() {\n    //функция для удаления выделенных чекбоксом полей и отрисовки нового массива\n    for (let i = 0; i < data.length; i++) {\n      if (checkedItemsArray.includes(data[i].id)) {\n        data.splice(i, 1);\n        i--;\n      }\n    }\n    setCheckedItemsArray([]);\n  }\n\n  const isAllChecked =\n    checkedItemsArray.length && checkedItemsArray.length === data.length;\n\n  function checkboxHandler(id) {\n    //обработчик для добавления чекбокса одному полю отображаемой таблицы\n    setCheckedItemsArray((prev) => {\n      if (prev.includes(id)) {\n        return prev.filter((item) => item !== id);\n      } else {\n        return [...prev, id];\n      }\n    });\n    //фильтруем массив и возвращаем новый без находящегося в нем id\n    //иначе если id в массиве нет, разворачиваем старый массив и добавляем туда новый id\n  }\n\n  function allClick() {\n    const newArr = data.map((item) => item.id); // создаем новый массив в который помещаем все id полей отображаемой таблицы\n\n    if (newArr.length === checkedItemsArray.length) {\n      // если массив выбранных полей таблицы равен выбранным полям по одному\n      return setCheckedItemsArray([]); // то сбрасываем значение массива до пустого\n    }\n    setCheckedItemsArray(newArr); //иначе добавляем оставшиеся поля таблицы в массив\n  }\n\n  return {\n    allClick,\n    checkboxHandler,\n    isAllChecked,\n    deleteCellTable,\n    checkedItemsArray,\n  };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC9D,SAASM,eAAeA,CAAA,EAAG;IACzB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIH,iBAAiB,CAACK,QAAQ,CAACP,IAAI,CAACK,CAAC,CAAC,CAACG,EAAE,CAAC,EAAE;QAC1CR,IAAI,CAACS,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;QACjBA,CAAC,EAAE;MACL;IACF;IACAF,oBAAoB,CAAC,EAAE,CAAC;EAC1B;EAEA,MAAMO,YAAY,GAChBR,iBAAiB,CAACI,MAAM,IAAIJ,iBAAiB,CAACI,MAAM,KAAKN,IAAI,CAACM,MAAM;EAEtE,SAASK,eAAeA,CAACH,EAAE,EAAE;IAC3B;IACAL,oBAAoB,CAAES,IAAI,IAAK;MAC7B,IAAIA,IAAI,CAACL,QAAQ,CAACC,EAAE,CAAC,EAAE;QACrB,OAAOI,IAAI,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKN,EAAE,CAAC;MAC3C,CAAC,MAAM;QACL,OAAO,CAAC,GAAGI,IAAI,EAAEJ,EAAE,CAAC;MACtB;IACF,CAAC,CAAC;IACF;IACA;EACF;;EAEA,SAASO,QAAQA,CAAA,EAAG;IAClB,MAAMC,MAAM,GAAGhB,IAAI,CAACiB,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACN,EAAE,CAAC,CAAC,CAAC;;IAE5C,IAAIQ,MAAM,CAACV,MAAM,KAAKJ,iBAAiB,CAACI,MAAM,EAAE;MAC9C;MACA,OAAOH,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC;;IACAA,oBAAoB,CAACa,MAAM,CAAC,CAAC,CAAC;EAChC;;EAEA,OAAO;IACLD,QAAQ;IACRJ,eAAe;IACfD,YAAY;IACZN,eAAe;IACfF;EACF,CAAC;AACH;AAACD,EAAA,CA9CeF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}